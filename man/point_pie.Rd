% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_point_pie.R, R/stat_point_pie.R
\name{point_pie}
\alias{point_pie}
\alias{geom_point_pie}
\alias{stat_point_pie}
\title{Draw pie chart at any x,y coordinates.}
\usage{
geom_point_pie(
  mapping = NULL,
  data = NULL,
  stat = StatPointPie,
  position = "identity",
  r0 = 0L,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

stat_point_pie(
  mapping = NULL,
  data = NULL,
  geom = GeomPointPie,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{r0}{The radius (0-1) of the inner circle, in case a donut plot is needed.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{geom}{The geom to use.}
}
\description{
This geom is used to draw any number of pie chart at any
arbitrary x and y coordinates.
A advantage of this geom over other implementation is that is keeps its
aspect ratio so the point is always a perfect circle.
It can also be mapped to both continuous and discrete position scales.
}
\details{
\code{subgroup}:
The subgroup aesthetics refers to a set of observations that belong to the
same pie. It is used to calculate the total count. Most of the time you
don't need to map this, and we will use the combination of x and y
coordiantes to decide which observations belong to the same pie chart.
\strong{However}, if two subgroups have the same coordinates,
such as when making two concentric pie charts,
the default subgroups calculation is not accurate.
You will need to supply the subgroup.

\code{amount}:
Alternatively, you can calculate the per-subgroup total count yourself and
map it to amount.
}
\section{Aesthetics}{

\code{\link[=geom_point_pie]{geom_point_pie()}} understand the following aesthetics
(required aesthetics are in bold):
\itemize{
\item \strong{x}
\item \strong{y}
\item \strong{fill}: use this to specify the category.
\item subgroup: see @details
\item amount: see @details
\item color: line color.
\item r1: the size of the pie chart.
\item linetype
\item alpha
}
}

\section{Stat}{

By default, we assume the data is in a long format, where each row
corresponds to one observation. In this case, \code{\link[=stat_point_pie]{stat_point_pie()}} is called to
help generated count for \emph{each slice} of the pie.

You can generate your own \emph{per slice} count. In this case, map it to the
aesthetics called \code{amount}.
}

\examples{
# Two pie charts:
data = tibble::tibble(
    x = c(1, 1, 1, 2, 2, 2, 2),
    y = c(1, 1, 1, 2, 2, 2, 2),
    grp = c("a", "a", "b", "a", "a", "b", "b")
)
ggplot2::ggplot(data, ggplot2::aes(x = x, y = y)) +
  ggpointpie::geom_point_pie(ggplot2::aes(fill = grp))
}
