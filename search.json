[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yuhao Min. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Min Y (2022). ggpointpie: geom combine point pie chart.. R package version 0.0.2.0.","code":"@Manual{,   title = {ggpointpie: A geom that combine point and pie chart.},   author = {Yuhao Min},   year = {2022},   note = {R package version 0.0.2.0}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A geom that combine point and pie chart.","text":"ggpointpie ggplot2 extension add new geom represents pie chart. can make multiple piechart figure, different location. Like geom_point(), geom_point_pie() enables custom aes mapping color, fill, alpha, linetype, size, , can make whatever want.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A geom that combine point and pie chart.","text":"can install ggpointpie github:","code":"devtool::install(\"myuhao/ggpointpie\")"},{"path":[]},{"path":"/index.html","id":"a-simple-pie-chart","dir":"","previous_headings":"Example","what":"A simple pie chart.","title":"A geom that combine point and pie chart.","text":"","code":"library(tidyverse) mtcars %>%   ggplot(aes(x = 1, y = 1)) +   ggpointpie::geom_point_pie(aes(fill = as.character(cyl)))"},{"path":"/index.html","id":"more-complex-example","dir":"","previous_headings":"Example","what":"More complex example","title":"A geom that combine point and pie chart.","text":", show proportion carb cyl gear combination. can map size pie char cyl well.","code":"mtcars %>%   ggplot(aes(x = as.character(cyl), y = as.character(gear))) +   ggpointpie::geom_point_pie(aes(fill = as.character(carb), r1 = cyl)) +   ggpointpie::scale_r1_continuous(range = c(0.03, 0.15))"},{"path":"/index.html","id":"more","dir":"","previous_headings":"","what":"More","title":"A geom that combine point and pie chart.","text":"Please see vignette complete use guide.","code":""},{"path":"/reference/dot-calc_arc.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate coordinates along an arc. — .calc_arc","title":"Generate coordinates along an arc. — .calc_arc","text":"Generate coordinates along arc.","code":""},{"path":"/reference/dot-calc_arc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate coordinates along an arc. — .calc_arc","text":"","code":".calc_arc(.x, .y, .r, .theta0, .theta1, n, go_ccw = TRUE)"},{"path":"/reference/dot-calc_arc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate coordinates along an arc. — .calc_arc","text":".r radius arc .theta0 Start arc. n number points sample. Note, number used entire circle go_cww points calculate CounterClockWise order?","code":""},{"path":"/reference/dot-calc_arc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate coordinates along an arc. — .calc_arc","text":"named list length 2, specifying x y coordinates arc required.","code":""},{"path":"/reference/dot-calc_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the coordinate for a single polygonGrob — .calc_pie","title":"Generate the coordinate for a single polygonGrob — .calc_pie","text":"case delta theta > 2 * pi, draw center.","code":""},{"path":"/reference/dot-calc_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the coordinate for a single polygonGrob — .calc_pie","text":"","code":".calc_pie(.x, .y, .r0, .r1, .theta0, .theta1, n = 360)"},{"path":"/reference/ggproto-subclass.html","id":null,"dir":"Reference","previous_headings":"","what":"PointPie ggproto classes — ggproto-subclass","title":"PointPie ggproto classes — ggproto-subclass","text":"ggproto() class describes combination pie chart point.","code":""},{"path":"/reference/ggproto-subclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PointPie ggproto classes — ggproto-subclass","text":"","code":"GeomPointPie  StatPointPie"},{"path":"/reference/ggproto-subclass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PointPie ggproto classes — ggproto-subclass","text":"object class GeomPointPie (inherits GeomPolygon, Geom, ggproto, gg) length 5. object class StatPointPie (inherits Stat, ggproto, gg) length 3.","code":""},{"path":"/reference/ggproto-subclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PointPie ggproto classes — ggproto-subclass","text":"amount Useful user calculate amount subgroup. subgroup complete pie chart","code":""},{"path":"/reference/ggproto-subclass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PointPie ggproto classes — ggproto-subclass","text":"subclass inherited ggproto(). Use main layer functions geom_point_pie() instead object. stat calculate count subgroup handle long data format","code":""},{"path":"/reference/pieGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Pie chart grob. — pieGrob","title":"Pie chart grob. — pieGrob","text":"Use create grob piece pie chart always circle. Maintain aspect ratio.","code":""},{"path":"/reference/pieGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pie chart grob. — pieGrob","text":"","code":"pieGrob(   x = 0.5,   y = 0.5,   r0 = 0,   r1 = 0.3,   theta0 = 0,   theta1 = pi/2,   n = 360,   position_unit = \"npc\",   size_unit = \"snpc\",   gp = gpar(),   vp = NULL,   name = NULL )"},{"path":"/reference/pieGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pie chart grob. — pieGrob","text":"x, y x y coordinates grob, position_unit. r0, r1 inner outer arc radius, size_unit. theta0, theta1 start end angle piece pie, radius. n number points sample. position_unit grid unit use put grob. size_unit grid unit use size grob. gp object grid::gpar(). vp grid::viewport() object. name character identifier.","code":""},{"path":"/reference/pieGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pie chart grob. — pieGrob","text":"grid::polygonGrob() object represents piece pie chart.","code":""},{"path":"/reference/pieGrob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pie chart grob. — pieGrob","text":"new grob piece pie chart. worth mention ggforce package implement shape grob. However, understanding, aspect ratio grob change, resulting ellipse like pie chart. gridExtra::ngonGrob() implements polygon grob maintain aspect ratio. uses grid::polygonGrob() internally unit conversion. Inspired gridExtra approach, separately specify position (npc-based) size (snpc-based) parameters. end, grob located desired location radius proportional smaller width height current viewport. Everything normalized 0-1 can used. piece pie greater 2*pi, draw circle instrand.","code":""},{"path":[]},{"path":"/reference/pieGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pie chart grob. — pieGrob","text":"","code":"# A simple slice of the pie chart that is red. pie1 = pieGrob(   x = 0.3, y = 0.3,   r0 = 0.0, r1 = 0.5,   gp = grid::gpar(fill = \"red\") ) grid::grid.draw(pie1)   # How about a part of a donut? donut = pieGrob(   x = 0.7, y = 0.7,   r0 = 0.1, r1 = 0.2,   theta0 = pi / 2, theta1 = 3 * pi / 2,   gp = grid::gpar(col = \"green\", lty =  2) ) grid::grid.newpage() grid::grid.draw(donut)   # grob parameters are vectorized many_pieces = pieGrob(   x = c(0.3, 0.7), y = c(0.3, 0.7),   r0 = c(0, 0.1), r1 = c(0.2, 0.4),   theta0 = c(1, 2), theta1 = c(2, 3),   gp = grid::gpar(     fill = c(\"orange\", \"blue\"),     lty = c(2, 3),     col = c(\"grey20\", \"#FFFFFF\")   ) ) grid::grid.newpage() grid::grid.draw(many_pieces)   # If is is a full circle, draw circle... big_pie = pieGrob(   x = 0.5, y = 0.5,   r0 = 0.0, r1 = 0.4,   theta0 = 0, theta1 = 2 * pi,   gp = grid::gpar(fill = \"blue\") ) grid::grid.newpage() grid::grid.draw(big_pie)"},{"path":"/reference/point_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw pie chart at any x,y coordinates. — point_pie","title":"Draw pie chart at any x,y coordinates. — point_pie","text":"geom used draw number pie chart arbitrary x y coordinates. advantage geom implementation keeps aspect ratio point always perfect circle. can also mapped continuous discrete position scales.","code":""},{"path":"/reference/point_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw pie chart at any x,y coordinates. — point_pie","text":"","code":"geom_point_pie(   mapping = NULL,   data = NULL,   stat = StatPointPie,   position = \"identity\",   r0 = 0L,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )  stat_point_pie(   mapping = NULL,   data = NULL,   geom = GeomPointPie,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"/reference/point_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw pie chart at any x,y coordinates. — point_pie","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. r0 radius (0-1) inner circle, case donut plot needed. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"/reference/point_pie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw pie chart at any x,y coordinates. — point_pie","text":"subgroup: subgroup aesthetics refers set observations belong pie. used calculate total count. time need map , use combination x y coordiantes decide observations belong pie chart. However, two subgroups coordinates, making two concentric pie charts, default subgroups calculation accurate. need supply subgroup. amount: Alternatively, can calculate per-subgroup total count map amount.","code":""},{"path":"/reference/point_pie.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Draw pie chart at any x,y coordinates. — point_pie","text":"geom_point_pie() understand following aesthetics (required aesthetics bold): x y fill: use specify category. subgroup: see @details amount: see @details color: line color. r1: size pie chart. linetype alpha","code":""},{"path":"/reference/point_pie.html","id":"stat","dir":"Reference","previous_headings":"","what":"Stat","title":"Draw pie chart at any x,y coordinates. — point_pie","text":"default, assume data long format, row corresponds one observation. case, stat_point_pie() called help generated count slice pie. can generate per slice count. case, map aesthetics called amount.","code":""},{"path":"/reference/point_pie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw pie chart at any x,y coordinates. — point_pie","text":"","code":"# Two pie charts: data = tibble::tibble(     x = c(1, 1, 1, 2, 2, 2, 2),     y = c(1, 1, 1, 2, 2, 2, 2),     grp = c(\"a\", \"a\", \"b\", \"a\", \"a\", \"b\", \"b\") ) ggplot2::ggplot(data, ggplot2::aes(x = x, y = y)) +   ggpointpie::geom_point_pie(ggplot2::aes(fill = grp))"},{"path":"/reference/scale_r1.html","id":null,"dir":"Reference","previous_headings":"","what":"The scales to map the point pie radius. — scale_r1","title":"The scales to map the point pie radius. — scale_r1","text":"scales used r1 aes geom_point_pie layer default. currently support discrete scale.","code":""},{"path":"/reference/scale_r1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The scales to map the point pie radius. — scale_r1","text":"","code":"scale_r1_discrete(...)  scale_r1_continuous(   name = waiver(),   breaks = waiver(),   labels = waiver(),   limits = NULL,   range = c(0.1, 0.4),   trans = \"identity\",   guide = \"legend\" )"},{"path":"/reference/scale_r1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The scales to map the point pie radius. — scale_r1","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. breaks One : NULL breaks waiver() default breaks computed transformation object numeric vector positions function takes limits input returns breaks output (e.g., function returned scales::extended_breaks()). Also accepts rlang lambda function notation. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) function takes breaks input returns labels output. Also accepts rlang lambda function notation. limits One : NULL use default scale range numeric vector length two providing limits scale. Use NA refer existing minimum maximum function accepts existing (automatic) limits returns new limits. Also accepts rlang lambda function notation. Note setting limits positional scales remove data outside limits. purpose zoom, use limit argument coordinate system (see coord_cartesian()). trans continuous scales, name transformation object object . Built-transformations include \"asn\", \"atanh\", \"boxcox\", \"date\", \"exp\", \"hms\", \"identity\", \"log\", \"log10\", \"log1p\", \"log2\", \"logit\", \"modulus\", \"probability\", \"probit\", \"pseudo_log\", \"reciprocal\", \"reverse\", \"sqrt\" \"time\". transformation object bundles together transform, inverse, methods generating breaks labels. Transformation objects defined scales package, called <name>_trans (e.g., scales::boxcox_trans()). can create transformation scales::trans_new(). guide function used create guide name. See guides() information.","code":""},{"path":[]}]
